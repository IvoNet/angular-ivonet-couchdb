/*
 * Copyright 2015 Ivo Woltring <webmaster@ivonet.nl>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

!function () {
   function e() {
      return {
         serverUrl: "http://127.0.0.1:5984", db: null, usrCtx: {name: null, roles: []}, $get: function () {
            return {server: this.serverUrl, usrCtx: this.usrCtx, db: this.db}
         }
      }
   }

   function r(e, r, n, t) {
      function o(r) {
         e.server = r
      }

      function s() {
         return e.server
      }

      function u(r) {
         e.db = r
      }

      function i() {
         return e.db
      }

      function c(o, s) {
         var u = "name=" + encodeURIComponent(o) + "&password=" + encodeURIComponent(s), i = n.defer();
         return r({
            method: "POST",
            url: _(e.server) + "/_session",
            headers: {"Content-Type": "application/x-www-form-urlencoded"},
            data: u.replace(/%20/g, "+"),
            withCredentials: !0
         }).success(function (r) {
            delete r.ok, r.name = o, e.usrCtx = r, i.resolve(r)
         }).error(function (e, r) {
            i.reject(null === e ? t.ERR_CONNECTION_REFUSED : {status: r, reason: e.reason, error: e.error})
         }), i.promise
      }

      function a() {
         var t = n.defer();
         return r({method: "DELETE", url: N(), withCredentials: !0}).success(function () {
            e.usrCtx = {name: null, roles: []}, t.resolve(!0)
         }), t.promise
      }

      function l() {
         var e = n.defer();
         return r({method: "GET", url: N(), withCredentials: !0}).success(function (r) {
            e.resolve(r.userCtx)
         }), e.promise
      }

      function d() {
         var o = n.defer();
         return r({method: "GET", url: N(), withCredentials: !0}).success(function (r) {
            e.usrCtx = r.usrCtx, o.resolve(null !== r.usrCtx.name)
         }).error(function (e, r) {
            o.reject(null === e ? t.ERR_CONNECTION_REFUSED : {status: r, reason: e.reason, error: e.error})
         }), o.promise
      }

      function f() {
         return e.usrCtx.name
      }

      function C() {
         return e.usrCtx.roles
      }

      function v(e) {
         var o = n.defer();
         return r({
            method: "POST",
            url: R(),
            data: e,
            headers: {"Content-Type": "application/json"},
            withCredentials: !0
         }).success(function (e) {
            delete e.ok, o.resolve(e)
         }).error(function (e, r) {
            o.reject(null === e ? t.ERR_CONNECTION_REFUSED : {status: r, reason: e.reason, error: e.error})
         }), o.promise
      }

      function h(e) {
         var o = n.defer();
         return r({
            method: "PUT",
            url: _(R(), e._id),
            data: e,
            headers: {"Content-Type": "application/json"},
            withCredentials: !0
         }).success(function (e) {
            o.resolve(e)
         }).error(function (e, r) {
            o.reject(null === e ? t.ERR_CONNECTION_REFUSED : {status: r, reason: e.reason, error: e.error})
         }), o.promise
      }

      function m(e) {
         var o = n.defer();
         return void 0 === e._id || void 0 === e._rev ? (o.reject({
            status: 400,
            reason: "Bad Request",
            error: "When deleting both _id and _rev must be present in the document"
         }), o.promise) : (r({
            method: "DELETE",
            url: _(R(), e._id),
            params: {rev: e._rev},
            withCredentials: !0
         }).success(function (e) {
            o.resolve(e)
         }).error(function (e, r) {
            o.reject(null === e ? t.ERR_CONNECTION_REFUSED : {status: r, reason: e.reason, error: e.error})
         }), o.promise)
      }

      function p(e) {
         var t = n.defer();
         return r({method: "GET", url: _(R(), e.replace("/", "/   "))}).success(function (e) {
            t.resolve(e)
         }), t.promise
      }

      function E() {
         var e = n.defer();
         return r({method: "GET", url: _(R(), "/_all_docs"), withCredentials: !0}).success(function (r) {
            for (var n = r.rows.length - 1; n >= 0; n--)r.rows[n].id.indexOf("_design") >= 0
                                                        && delete r.rows.splice(n, 1);
            r.total_rows = r.rows.length, e.resolve(r)
         }), e.promise
      }

      var _ = function (e, r, n) {
         var t = e;
         return r && (t = t + "/" + encodeURIComponent(r)), n && (t =
              t + "/" + encodeURIComponent(n)), t.replace("%2F", "/")
      }, R  = function () {
         return _(e.server, e.db)
      }, N  = function () {
         "use strict";
         return _(e.server) + "/_session"
      };
      return {
         server: {setUrl: o, getUrl: s},
         db: {use: u, getName: i},
         user: {login: c, logout: a, session: l, isAuthenticated: d, name: f, roles: C},
         doc: {post: v, "delete": m, get: p, put: h, all: E}
      }
   }

   function n() {
      return {ERR_CONNECTION_REFUSED: {status: 503, error: "Service Unavailable", reason: "The server may be down."}}
   }

   r.$inject = [
      "IvoNetCouchConfig",
      "$http",
      "$q",
      "CouchConstants"
   ], angular.module("IvoNetCouchDB", []).constant("CouchConstants", n()).provider("IvoNetCouchConfig", e).factory("couchdb", r)
}();