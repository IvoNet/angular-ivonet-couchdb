/*
 * Copyright 2015 ivonet
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

!function () {
   function e() {
      "use strict";
      return {errorServiceUnavailable: {status: 503, error: "Service Unavailable", reason: "The server may be down."}}
   }

   function r() {
      return {
         serverUrl: "http://127.0.0.1:5984", setServer: function (e) {
            this.serverUrl = e
         }, db: null, setDB: function (e) {
            this.db = e
         }, usrCtx: {name: null, roles: []}, $get: function () {
            return {server: this.serverUrl, usrCtx: this.usrCtx}
         }
      }
   }

   function n(e, r, n, t) {
      function o(r) {
         e.server = r
      }

      function s() {
         return e.server
      }

      function u(r) {
         e.db = r
      }

      function i() {
         return e.db
      }

      function a(o, s) {
         var u = "name=" + encodeURIComponent(o) + "&password=" + encodeURIComponent(s), i = n.defer();
         return r({
            method: "POST",
            url: b(e.server) + "/_session",
            headers: {"Content-Type": "application/x-www-form-urlencoded"},
            data: u.replace(/%20/g, "+"),
            withCredentials: !0
         }).success(function (r) {
            delete r.ok, r.name = o, e.usrCtx = r, i.resolve(r)
         }).error(function (e, r) {
            i.reject(null === e ? t.errorServiceUnavailable : {status: r, reason: e.reason, error: e.error})
         }), i.promise
      }

      function c() {
         var t = n.defer();
         return r({method: "DELETE", url: g(), withCredentials: !0}).success(function () {
            e.usrCtx = {name: null, roles: []}, t.resolve(!0)
         }), t.promise
      }

      function l() {
         var e = n.defer();
         return r({method: "GET", url: g(), withCredentials: !0}).success(function (r) {
            e.resolve(r.userCtx)
         }), e.promise
      }

      function d() {
         var o = n.defer();
         return r({method: "GET", url: g(), withCredentials: !0}).success(function (r) {
            console.log(r), e.usrCtx = r.userCtx, o.resolve(null !== r.userCtx.name)
         }).error(function (e, r) {
            o.reject(null === e ? t.errorServiceUnavailable : {status: r, reason: e.reason, error: e.error})
         }), o.promise
      }

      function v() {
         return e.usrCtx.name
      }

      function f() {
         return e.usrCtx.roles
      }

      function h(e) {
         console.log("post: " + e);
         var o = n.defer();
         return r({
            method: "POST",
            url: U(),
            data: e,
            headers: {"Content-Type": "application/json"},
            withCredentials: !0
         }).success(function (e) {
            delete e.ok, o.resolve(e)
         }).error(function (e, r) {
            o.reject(null === e ? t.errorServiceUnavailable : {status: r, reason: e.reason, error: e.error})
         }), o.promise
      }

      function m(e) {
         var o = n.defer();
         return r({
            method: "PUT",
            url: b(U(), e._id),
            data: e,
            headers: {"Content-Type": "application/json"},
            withCredentials: !0
         }).success(function (e) {
            o.resolve(e)
         }).error(function (e, r) {
            o.reject(null === e ? t.errorServiceUnavailable : {status: r, reason: e.reason, error: e.error})
         }), o.promise
      }

      function p(e) {
         var o = n.defer();
         return void 0 === e._id || void 0 === e._rev ? (o.reject({
            status: 400,
            reason: "Bad Request",
            error: "When deleting both _id and _rev must be present in the document"
         }), o.promise) : (r({
            method: "DELETE",
            url: b(U(), e._id),
            params: {rev: e._rev},
            withCredentials: !0
         }).success(function (e) {
            o.resolve(e)
         }).error(function (e, r) {
            o.reject(null === e ? t.errorServiceUnavailable : {status: r, reason: e.reason, error: e.error})
         }), o.promise)
      }

      function C(e) {
         var t = n.defer();
         return r({method: "GET", url: b(U(), e.replace("/", "/   "))}).success(function (e) {
            t.resolve(e)
         }), t.promise
      }

      function w() {
         var e = n.defer();
         return r({method: "GET", url: b(U(), "/_all_docs"), withCredentials: !0}).success(function (r) {
            for (var n = r.rows.length - 1; n >= 0; n--)r.rows[n].id.indexOf("_design") >= 0
                                                        && delete r.rows.splice(n, 1);
            r.total_rows = r.rows.length, e.resolve(r)
         }), e.promise
      }

      var b = function (e, r, n) {
         var t = e;
         return r && (t = t + "/" + encodeURIComponent(r)), n && (t =
              t + "/" + encodeURIComponent(n)), t.replace("%2F", "/")
      }, U  = function () {
         return b(e.server, e.db)
      }, g  = function () {
         "use strict";
         return b(e.server) + "/_session"
      };
      return {
         server: {setUrl: o, getUrl: s},
         db: {use: u, getName: i},
         user: {login: a, logout: c, session: l, isAuthenticated: d, name: v, roles: f},
         doc: {post: h, "delete": p, get: C, put: m, all: w}
      }
   }

   n.$inject = [
      "IvoNetCouchConfig",
      "$http",
      "$q"
   ], angular.module("IvoNetCouchDB", []).constant("CouchConstants", e).provider("IvoNetCouchConfig", r).factory("couchdb", n)
}();